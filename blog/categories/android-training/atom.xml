<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android:Training | 胡凯]]></title>
  <link href="http://hukai.me/blog/categories/android-training/atom.xml" rel="self"/>
  <link href="http://hukai.me/"/>
  <updated>2018-07-19T00:14:13+08:00</updated>
  <id>http://hukai.me/</id>
  <author>
    <name><![CDATA[HuKai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Training - 创建可穿戴应用(5 - 通过蓝牙进行调试)]]></title>
    <link href="http://hukai.me/android-training-wearable-app-bt-debug/"/>
    <updated>2014-07-15T00:23:00+08:00</updated>
    <id>http://hukai.me/android-training-wearable-app-bt-debug</id>
    <content type="html"><![CDATA[<p>你可以通过蓝牙来调试你的可穿戴应用，通过蓝牙把调试数据输出到手持设备上，手持设备是有连接到开发电脑上的。</p>

<h2>搭建好设备用来调试</h2>

<ul>
<li>开启手持设备的USB调试：

<ul>
<li>打开设置应用并滑动到底部。</li>
<li>如果在设置里面没有开发者选项，点击关于手机，滑动到底部，点击build number 7次。</li>
<li>返回并点击开发者选项。</li>
<li>开启USB调试。</li>
</ul>
</li>
<li>开启可穿戴设备的蓝牙调试：

<ul>
<li>点击主界面2次，来到Wear菜单界面。</li>
<li>滑动到底部，点击设置。</li>
<li>滑动到底部，如果没有开发者选项，点击Build Number 7次。</li>
<li>点击开发者选项。</li>
<li>开启蓝牙调试。</li>
</ul>
</li>
</ul>


<!-- More -->


<h2>建立调试会话</h2>

<ol>
<li>在手持设备上，打开<code>Android Wear</code>这个伴侣应用。</li>
<li>点击右上角的菜单，选择设置。</li>
<li>开启蓝牙调试。你将会在选项下面看到一个小的状态信息：
<code>xml
Host: disconnected
Target: connected
</code></li>
<li>通过USB连接手持设备到你的电脑上，并执行下面的命令：
<code>xml
adb forward tcp:4444 localabstract:/adb-hub; adb connect localhost:4444
</code>

<blockquote><p><strong>Note:</strong> 你可以使用任何可用的端口。</p></blockquote></li>
</ol>


<p>在<code>Android Wear</code>伴侣应用上，你将会看到状态变为：
<code>xml
Host: connected
Target: connected
</code></p>

<h2>调试你的应用</h2>

<p>当运行abd devices的命令时，你的可穿戴设备是作为localhost:4444的。执行任何的adb命令，需要使用下面的格式：
<code>xml
adb -s localhost:4444 &lt;command&gt;
</code>
如果没有任何其他的设备通过TCP/IP连接到手持设备，你可以使用下面的简短命令：
<code>xml
adb -e &lt;command&gt;
</code>
例如：
<code>xml
adb -e logcat
adb -e shell
adb -e bugreport
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training - 创建可穿戴应用(4 - 打包可穿戴应用)]]></title>
    <link href="http://hukai.me/android-training-wearable-app-packaging/"/>
    <updated>2014-07-14T23:32:00+08:00</updated>
    <id>http://hukai.me/android-training-wearable-app-packaging</id>
    <content type="html"><![CDATA[<p>当发布应用给用户之前，你必须把可穿戴应用打包到手持应用内。因为不能直接在可穿戴设备上浏览并安装应用。如果打包正确，当用户下载手持应用时，系统会自动下发可穿戴应用到匹对的可穿戴设备上。</p>

<blockquote><p><strong>Note:</strong> 如果开发时签名用的是debug key，这个特性是无法正常工作的。在开发时，需要使用<code>adb install</code>的命令或者Android Studio来安装可穿戴应用。</p></blockquote>

<h2>使用Android Studio打包</h2>

<p>在Android Studio中打包可穿戴应用有下面几个步骤：</p>

<ol>
<li>在手持应用的buidl.gradle文件中把可穿戴应用声明为依赖：
<code>xml
dependencies {
compile 'com.google.android.gms:play-services:5.0.+@aar'
compile 'com.android.support:support-v4:20.0.+''
wearApp project(':wearable')
}
</code></li>
</ol>


<!-- More -->


<ol>
<li>点击<strong>Build</strong> > <strong>Generate Signed APK</strong>... 安装屏幕上的指示来制定你的release key并为你的app进行签名。Android Studio导出签名好的手持应用，他内置了可穿戴应用。
或者，你可以在可穿戴应用与手持应用的build.gradle文件里面建立一个签名规则。为了能够正常自动推送可穿戴应用，这两个应用都必须签名。
<code>xml
android {
...
signingConfigs {
 release {
   keyAlias 'myAlias'
   keyPassword 'myPw'
   storeFile file('path/to/release.keystore')
   storePassword 'myPw'
 }
}
buildTypes {
 release {
   ...
   signingConfig signingConfigs.release
 }d
}
...
}
</code>
通过点击Android Studio右边的Gradle按钮来建立手持应用，并执行<strong>assembleRelease</strong>任务。这个任务放在<strong>Project name</strong> > <strong>Handheld module name</strong> > <strong>assembleRelease.</strong></li>
</ol>


<blockquote><p><strong>Note:</strong>这个例子中把密码写在了Gradle文件中，这应该不是期待的写法。请参考<a href="http://developer.android.com/sdk/installing/studio-build.html#configureSigning">Configure signing settings</a>学习如何为密码创建环境变量。</p></blockquote>

<h3>分别为可穿戴应用与手持应用进行签名</h3>

<p>如果你的Build任务需要为可穿戴应用与手持应用签不同的Key，你可以像下面一样在手持应用的build.gradle文件中声明规则。
<code>xml
dependencies {
  ...
  wearApp files('/path/to/wearable_app.apk')
}
</code>
你可以为手持应用手动进行签任何形式的Key (可以是Android Studio Build > Generate Signed APK...的方式，也可以是Gradle signingConfig规则的方式)</p>

<h2>手动打包</h2>

<p>如果你使用的是其他IDE，你仍然可以把可穿戴应用打包到手持应用中。</p>

<ol>
<li>把签好名的可穿戴应用放到手持应用的<code>res/raw</code>目录下。 我们把这个应用作为<code>wearable_app.apk</code>。</li>
<li>创建<code>res/xml/wearable_app_desc.xml</code>文件，里面包含可穿戴设备的版本信息与路径。例如:
<code>xml
&lt;wearableApp package="wearable.app.package.name"&gt;
&lt;versionCode&gt;1&lt;/versionCode&gt;
&lt;versionName&gt;1.0&lt;/versionName&gt;
&lt;rawPathResId&gt;wearable_app&lt;/rawPathResId&gt;
&lt;/wearableApp&gt;
</code>
package, versionCode, 与 versionName需要和可穿戴应用的AndroidManifest.xml里面的信息一致。<code>rawPathResId</code>是一个static的变量表示APK的名称。。</li>
<li>添加<code>meta-data</code>标签到你的手持应用的<code>&lt;application&gt;</code>标签下，指明引用wearable_app_desc.xml文件
```xml
&lt;meta-data android:name="com.google.android.wearable.beta.app"

<pre><code>          android:resource="@xml/wearable_app_desc"/&gt;
</code></pre>

<p>```</p></li>
<li>构建并签名手持应用。</li>
</ol>


<h2>关闭资源压缩</h2>

<p>许多构建工具会自动压缩放在res/raw目录下的文件。因为可穿戴APK已经被压缩过了，那些压缩工作再次压缩会导致应用无法正常安装。</p>

<p>这样的话，安装失败。在手持应用上，<code>PackageUpdateService</code>会输出如下的错误日志："this file cannot be opened as a file descriptor; it is probably compressed."</p>

<p>Android Studio 默认不会压缩你的APK，如果你使用另外一个构建流程，需要确保不会发生重复压缩可穿戴应用的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training - 创建可穿戴应用(3 - 添加语音能力)]]></title>
    <link href="http://hukai.me/android-training-wearable-app-voice-input/"/>
    <updated>2014-07-14T21:43:00+08:00</updated>
    <id>http://hukai.me/android-training-wearable-app-voice-input</id>
    <content type="html"><![CDATA[<p>语音指令是可穿戴体验的一个重要的部分。这使得用户可以释放双手，快速发出指令。穿戴提供了2种类型的语音操作：</p>

<ul>
<li><p><strong>系统提供的</strong></p>

<p>这些语音指令都是基于任务的，并且内置在Wear的平台内。你在activity中过滤你想要接收的指令。例如包含"Take a note" 或者 "Set an alarm"的指令。</p></li>
<li><p><strong>应用提供的</strong></p>

<p>这些语音指令都是基于应用的，你需要像声明一个Launcher Icon一样定义这些指令。用户通过说"Start XXX"来使用那些语音指令，然后会启动你指定启动的activity。</p></li>
</ul>


<h2>声明系统提供的语音指令</h2>

<p>Android Wear平台基于用户的操作提供了一些语音指令，例如"Take a note" 或者 "Set an alarm"。用户发出想要做的操作指令，让系统寻找应该启动最合适的activity。</p>

<p>当用户说出语音指令时，你的应用能够被过滤出来启动一个activity。如果你想要启动一个service在后台执行任务，需要显示一个activity呈现作为线索。当你想要废弃这个可见的线索时，需要确保执行了finish()。</p>

<!-- More -->


<p>例如，对于"Take a note"的指令，定义一个MyNoteActivity来接收这个指令:</p>

<p>```java
<activity android:name="MyNoteActivity"></p>

<pre><code>  &lt;intent-filter&gt;
      &lt;action android:name="android.intent.action.SEND" /&gt;
      &lt;category android:name="com.google.android.voicesearch.SELF_NOTE" /&gt;
  &lt;/intent-filter&gt;
</code></pre>

<p>  </activity>
```</p>

<p>下面列出了Wear平台支持的语音指令：</p>

<p><img src="/images/voice_intent_1.png" alt="voice_intent_1" />
<img src="/images/voice_intent_2.png" alt="voice_intent_2" />
<img src="/images/voice_intent_3.png" alt="voice_intent_3" /></p>

<p>关于注册intent与获取intent extra的信息，请参考<a href="http://developer.android.com/guide/components/intents-common.html">Common intents</a>.</p>

<h2>声明应用提供的语音指令</h2>

<p>如果系统提供的语音指令无法满足你的需求，你可以使用"Start MyActivityName"的指令来直接启动你的应用。</p>

<p>注册一个"Start"指令和注册手持应用上得Launcher是一样的。</p>

<p>在"Start"指令的后面需要指定的文字, 这个文字需要注册在activity的label属性上。例如，下面的设置能够识别"Start MyRunningApp"的语音指令并启动StartRunActivity.</p>

<p>```xml
<application>
  <activity android:name="StartRunActivity" android:label="MyRunningApp"></p>

<pre><code>  &lt;intent-filter&gt;
      &lt;action android:name="android.intent.action.MAIN" /&gt;
      &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
  &lt;/intent-filter&gt;
</code></pre>

<p>  </activity>
</application>
```</p>

<h2>获取输入的自由语音</h2>

<p>除了使用语音指令来启动activity之外，你也可以执行系统内置的语言识别activity来获取用户的语音输入。这对于获取用户的输入信息非常有帮助，例如执行搜索或者发送一个消息。</p>

<p>在你的应用中，startActivityForResult()使用<code>ACTION_RECOGNIZE_SPEECH</code>启动系统语音识别应用。在onActivityResult()中处理返回的结果：</p>

<p>```java
private static final int SPEECH_REQUEST_CODE = 0;</p>

<p>// Create an intent that can start the Speech Recognizer activity
private void displaySpeechRecognizer() {</p>

<pre><code>Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
        RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
</code></pre>

<p>// Start the activity, the intent will be populated with the speech text</p>

<pre><code>startActivityForResult(intent, SPEECH_REQUEST_CODE);
</code></pre>

<p>}</p>

<p>// This callback is invoked when the Speech Recognizer returns.
// This is where you process the intent and extract the speech text from the intent.
@Override
protected void onActivityResult(int requestCode, int resultCode,</p>

<pre><code>    Intent data) {
if (requestCode == SPEECH_REQUEST &amp;&amp; resultCode == RESULT_OK) {
    List&lt;String&gt; results = data.getStringArrayListExtra(
            RecognizerIntent.EXTRA_RESULTS);
    String spokenText = results.get(0);
    // Do something with spokenText
}
super.onActivityResult(requestCode, resultCode, data);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training - 创建可穿戴应用(2 - 创建自定义的布局)]]></title>
    <link href="http://hukai.me/android-training-wearable-app-layouts/"/>
    <updated>2014-07-14T20:16:00+08:00</updated>
    <id>http://hukai.me/android-training-wearable-app-layouts</id>
    <content type="html"><![CDATA[<p>为可穿戴设备创建布局是和手持设备是一样的。但是 不要期望通过搬迁手持应用的功能与UI到可穿戴上会有一个好的用户体验。仅仅在有需要的时候，你才应该创建自定义的布局。请参考可穿戴设备的<a href="http://developer.android.com/design/wear/index.html">design guidelines</a>学习如何设计一个优秀的可穿戴应用。</p>

<p><a name="CustomNotification"></a></p>

<h2>创建自定义Notification</h2>

<p>通常来说，你应该在手持应用上创建好notification，然后让它自动同步到可穿戴设备上。这使得你只需要创建一次notification，然后可以在不同类型的设备(不仅仅是可穿戴设备，也包含车载设备与电视)上进行显示，免去为不同设备进行重新设计。</p>

<p>如果标准的notification风格无法满足你的需求(例如<a href="http://developer.android.com/reference/android/support/v4/app/NotificationCompat.BigTextStyle.html">NotificationCompat.BigTextStyle</a> 或者 <a href="http://developer.android.com/reference/android/support/v4/app/NotificationCompat.InboxStyle.html">NotificationCompat.InboxStyle</a>)，你可以使用activity，显示一个自定义的布局来达到目的。在可穿戴设备上你只可以创建并处理自定义的notification，同时系统无法为这些notification同步到手持设备上。</p>

<p><strong>Note:</strong>当在可穿戴设备上创建自定义的notification时，你可以使用API Level 20上标准的APIs，不需要使用Support Library。</p>

<p>为了创建自定义的notification，步骤如下：</p>

<!-- More -->


<ol>
<li>创建布局并设置这个布局为需要显示的activity的content view:
<code>java
public void onCreate(Bundle bundle){
 ...
 setContentView(R.layout.notification_activity);
}
</code></li>
<li>为了使得activity能够显示在可穿戴设备上，需要在manifest文件中为activity定义必须的属性。你需要把activity声明为exportable，embeddable以及拥有一个空的task affinity。我们也推荐把activity的主题设置为<code>Theme.DeviceDefault.Light</code>。例如：
<code>xml
&lt;activity android:name="com.example.MyDisplayActivity"
  android:exported="true"
  android:allowEmbedded="true"
  android:taskAffinity=""
  android:theme="@android:style/Theme.DeviceDefault.Light" /&gt;
</code></li>
<li>为activity创建<a href="http://developer.android.com/reference/android/app/PendingIntent.html">PendingIntent</a>，例如：：
```java
Intent notificationIntent = new Intent(this, NotificationActivity.class);
PendingIntent notificationPendingIntent = PendingIntent.getActivity(this, 0, notificationIntent,

<pre><code> PendingIntent.FLAG_UPDATE_CURRENT);
</code></pre>

<p>```</p></li>
<li>创建<a href="http://developer.android.com/reference/android/app/Notification.html">Notification</a>并执行<a href="http://developer.android.com/reference/android/app/Notification.WearableExtender.html#setDisplayIntent(android.app.PendingIntent">setDisplayIntent()</a>)方法，参数是前面创建的PendingIntent。当用户查看这个notification时，系统使用这个PendingIntent来启动activity。</li>
<li>触发notification使用<a href="http://developer.android.com/reference/java/lang/Object.html#notify(">notify()</a>)的方法。</li>
</ol>


<blockquote><p><strong>Note:</strong> 当notification呈现在主页时，系统会根据notification的语义，使用一个标准的模板来呈现它。这个模板可以在所有的表盘上进行显示。当用户往上滑动notification时，将会看到为这个notification准备的自定义的activity。</p></blockquote>

<h2>使用Wearable UI库创建布局</h2>

<p>当你使用Android Studio的引导功能创建一个Wearable应用的时候，会自动包含一个非官方的UI库文件。你也可以通过给build.gradle文件添加下面的依赖声明把库文件添加到项目：
```xml
dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: ['*.jar'])
compile 'com.google.android.support:wearable:+'
compile 'com.google.android.gms:play-services-wearable:+'
</code></pre>

<p>}
```
这个库文件帮助你建立你设计的UI。下面是一些主要的类：
* <strong>BoxInsetLayout</strong> - 一个能够感知屏幕的形状并把子控件居中摆放的FrameLayout，。
* <strong>CardFragment</strong> - 一个能够可拉伸，垂直可滑动卡片的fragment。
* <strong>CircledImageView</strong> - 一个圆形的image view。
* <strong>ConfirmationActivity</strong> - 一个在用户完成一个操作之后用来显示确认动画的activity。* <strong>DismissOverlayView</strong> - 一个用来实现长按消失的View。
* <strong>GridViewPager</strong> - 一个可以横向与纵向滑动的局部控制器。你需要提供一个GridPagerAdapter用来生成显示页面的数据。
* <strong>GridPagerAdapter</strong> - 一个提供给GridViewPager显示页面的适配器。
* <strong>FragmentGridPagerAdapter</strong> - 一个为每个页面提供单独的fragment的适配器。
* <strong>WatchViewStub</strong> - 一个可以根据屏幕的形状生成特定布局的类。
* <strong>WearableListView</strong> - 一个针对可穿戴设备优化过后的ListView。它会垂直的显示列表内容，并在用户停止滑动时自动显示最靠近的Item。</p>

<blockquote><p><a href="http://developer.android.com/shareables/training/wearable-support-docs.zip">点击下载完整的API说明文档</a> 这个文档会详细的介绍每一个UI组件。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training - 创建可穿戴应用(1 - 创建并执行可穿戴应用)]]></title>
    <link href="http://hukai.me/android-training-wearable-app-creating/"/>
    <updated>2014-07-14T19:26:00+08:00</updated>
    <id>http://hukai.me/android-training-wearable-app-creating</id>
    <content type="html"><![CDATA[<p>可穿戴应用可以直接运行在可穿戴的设备上。拥有访问类似传感器的硬件权限，还有操作activity，services等权限。</p>

<p>你无法直接发布可穿戴应用到Google Play商城，需要利用手持应用来达到目的。因为可穿戴的设备不支持Google Play商城，所以当用户下载手持设备应用的时候，，会自动安装可穿戴应用到可穿戴设备上。手持应用还可以用来处理一些复杂繁重的任务，网络指令，或者其他的任务，最好发送操作结果返回给可穿戴设备。</p>

<p>这节课会介绍如何创建一个包含了手持应用与可穿戴应用的工程。</p>

<h2>搭建Android Wear模拟器或者真机设备。</h2>

<p>我们推荐在真机上进行开发，这样可以更好的评估用户体验。然而，模拟器可以使得你在不同类型的设备屏幕上进行模拟，这对测试来说更加有用。</p>

<h3>搭建Android Wear虚拟设备</h3>

<p>建立Android Wear虚拟设备需要下面几个步骤：</p>

<!-- More -->


<ol>
<li>点击<strong>Tools</strong> > <strong>Android</strong> > <strong>AVD Manager</strong>.</li>
<li>点击<strong>Create</strong>....</li>
<li>填写下面几项详细的设置，其余选项保留默认：

<ul>
<li><strong>AVD Name</strong> - AVD的名字</li>
<li><strong>Device</strong> - Android Wear圆形还是方形</li>
<li><strong>Target</strong> - Android 4.4W - API Level 20</li>
<li><strong>CPU/ABI</strong> - Android Wear ARM (armeabi-v7a)</li>
<li><strong>Keyboard</strong> - 选择Hardware keyboard present</li>
<li><strong>Skin</strong> - 圆形还是方形取决于选择的设备类型</li>
<li><strong>Snapshot</strong> - 不勾选 selected</li>
<li><strong>Use Host GPU</strong> - 勾选，为了支持自定义的activity能够显示可穿戴的notification。</li>
</ul>
</li>
<li>点击<strong>OK.</strong></li>
<li>启动模拟器:

<ul>
<li>选择你刚才创建的虚拟设备</li>
<li>点击<strong>Start</strong>...，然后选择<strong>Launch.</strong></li>
<li>等待模拟器初始化直到显示Android Wear的主界面。</li>
</ul>
</li>
<li>匹配你的手持和模拟器:

<ul>
<li>在你的手持设备上，从Google Play安装<code>Android Wear</code>应用(这是一个由Google公司写的用来匹配的应用)</li>
<li>通过USB连接你的手持设备到你的电脑。</li>
<li>切换AVD的接口到手持设备(这个步骤需要每次连接都执行)
<code>git
adb -d forward tcp:5601 tcp:5601
</code></li>
<li>启动手持设备上的<code>Android Wear</code>应用，并连接到模拟器。</li>
<li>点击右上角的菜单，选择Demo Cards。</li>
<li>你选择的卡片呈现在模拟器上会类似一个Notification。</li>
</ul>
</li>
</ol>


<h3>搭建Android Wear真机</h3>

<p>建立Android Wear真机，需要下面几个步骤：</p>

<ul>
<li>在你的手持设备的Google Play上安装<code>Android Wear</code>应用。</li>
<li>按照应用的命令指示与你的可穿戴设备进行匹对。如果你有做建立notification的操作，这个步骤刚好可以测试这一功能。</li>
<li>保持<code>Android Wear</code>应用在手机上的打开状态。</li>
<li>通过USB连接可穿戴设备到电脑上，这样你能够直接安装应用到可穿戴设备上。在可穿戴设备与<code>Android Wear</code>应用上会显示一个消息提示，是否允许进行调试。</li>
<li>在<code>Android Wear</code>应用上，总是选择允许连接。</li>
</ul>


<p>Android Studio上的Tool的窗口可以显示可穿戴设备的日志。当你执行<code>adb devices</code>命令的时候，也可以看到wearable的存在。</p>

<h2>创建Wear项目</h2>

<p>在开始开发之前，需要创建一个项目包含可穿戴应用与手持应用这两个模块。在Android Studio中，点击<strong>File</strong> > <strong>New Project</strong> 然后按照<a href="http://developer.android.com/sdk/installing/create-project.html">创建项目</a>的指引进行操作。如果你按照安装向导操作，需要输入下面的信息：</p>

<ol>
<li>在确认项目的窗口，输入你的应用的名称与包名。</li>
<li>在应用参数选择窗口:

<ul>
<li>勾选Phone 与 Tablet 并选择API 8: Android 2.2 (Froyo) 作为Minimum SDK.</li>
<li>勾选可穿戴并选择API 20: Android 4.4 (KitKat Wear) 作为Minimum SDK.</li>
</ul>
</li>
<li>在第一个添加activity的窗口，选择为Mobile模块添加一个空白的activity。</li>
<li>在第二个添加activity的窗口，选择为Wear模块添加一个空白的activity。</li>
</ol>


<p>当安装向导完成后，Andorid Studio创建了一个包含Mobile与Wear两个模块的项目。你可以在这2个模块中各自创建activity，service，layout等等。在手持应用里面，需要承担大部分繁重的任务，例如网络请求，密集计算任务或者是需要大量用户交互的任务。待这些任务完成之后，再通常把任务结果通过notification发送给可穿戴设备上，或者是通过同步机制发送数据给可穿戴设备。</p>

<blockquote><p><strong>Note:</strong> 可穿戴模块包含了一个"Hello World"的activity，它是使用<code>WatchViewStub</code>的布局。WatchViewStub是可穿戴support library中的一个UI组件。</p></blockquote>

<h2>安装可穿戴应用</h2>

<p>在开发过程中，你可以像安装手持应用一样直接安装可穿戴应用。可以使用<code>adb install</code>命令也可以使用Android Studio上面的Play按钮。</p>

<p>当需要把应用发布给用户的时候，你需要把可穿戴应用打包到手持应用中。当用户从Google Play安装手持应用时，连接上得可穿戴设备会自动收到可穿戴应用。</p>

<blockquote><p><strong>Note:</strong> 如果你给应用签名是Debug Key，是无法完成自动安装可穿戴应用的。请参考<a href="packaging.html">打包可穿戴应用</a>获取更多信息，学习如何正确的打包。</p></blockquote>

<p>为了安装"Hello World"应用到可穿戴设备，在Android Studiod的Run/Debug的下拉选项中选中Wear模块，点击Play按钮即可。在可穿戴设备上会显示activity并打印"Hello world!"</p>

<h2>include需要的libraries</h2>

<p>项目安装向导会自动把合适的模块依赖添加到对应的build.gradle文件中。然而，这些依赖并不是必须得，请阅读下面描述判断你是否需要这些依赖。</p>

<ul>
<li><p><strong>Notifications</strong></p>

<p><a href="http://developer.android.com/tools/support-library/features.html#v4">The Android v4 support library</a> (or v13)能够支持运行在手持应用的notification也能够在可穿戴设备上显示。</p></li>
</ul>


<p> 对于只显示在可穿戴设备上得notification(这意味着，他们是由直接执行在可穿戴设备上得app进行处理的)，你可以在Wear模块仅仅使用标准APIs (API Level 20) 并且把Mobile模块的依赖support library移除。</p>

<ul>
<li><p><strong>Wearable Data Layer</strong></p>

<p>可穿戴与手持设备之间进行同步与发送数据需要使用Wearable Data Layer APIs, 你需要最新版本的<a href="http://developer.android.com/google/play-services/setup.html">Google Play Services</a>。如果你不需要这些APIs，可以从这两个模块中把这部分的依赖移除。</p></li>
<li><p><strong>Wearable UI support library</strong></p>

<p>这是一个非官方正式的library，它包含了为可穿戴设备设计的UI组件。我们鼓励你在你的应用中使用他们。因为这些组件是最佳实践的例证。但是他们可能随时发生变化。然而，如果library有更新，你的应用并不会发送崩溃，因为那些代码已经编译到你的应用中了。为了获取更新包中新的功能，你只需要更新链接到新的版本并相应的更新你的应用就好了。这个library只是在你需要创建可穿戴应用时才会使用到。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
